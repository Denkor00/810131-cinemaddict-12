{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/main.js","webpack:///./src/mock/comment.js","webpack:///./src/mock/film.js","webpack:///./src/mock/menu.js","webpack:///./src/mock/user.js","webpack:///./src/presenter/film.js","webpack:///./src/presenter/movie-list.js","webpack:///./src/utils/common.js","webpack:///./src/utils/film.js","webpack:///./src/utils/render.js","webpack:///./src/view/abstract.js","webpack:///./src/view/film-card.js","webpack:///./src/view/film-details.js","webpack:///./src/view/films-container.js","webpack:///./src/view/films-list-container.js","webpack:///./src/view/films-list-most-commented.js","webpack:///./src/view/films-list-top-rated.js","webpack:///./src/view/films-list.js","webpack:///./src/view/menu.js","webpack:///./src/view/no-film.js","webpack:///./src/view/show-more-button.js","webpack:///./src/view/smart.js","webpack:///./src/view/sort.js","webpack:///./src/view/statistics.js","webpack:///./src/view/user-profile.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqD;AACf;AACqB;AACT;AACN;AACA;AACK;AACG;;AAEpD;;AAEA;AACA,+DAA+D,0DAAY;AAC3E;AACA;AACA,yBAAyB,uEAAiB;AAC1C;AACA,aAAa,kEAAY;;AAEzB;AACA;AACA;AACA;;AAEA,+DAAM,oBAAoB,6DAAe,QAAQ,0DAAS;AAC1D,+DAAM,kBAAkB,qDAAQ,oBAAoB,0DAAS;AAC7D,+DAAM,8BAA8B,2DAAc,cAAc,0DAAS;;AAEzE;AACA,2BAA2B,gEAAkB;AAC7C;;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAuE;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;AACP,MAAM,mEAAU;AAChB,SAAS,gFAAuB;AAChC,QAAQ,gFAAuB;AAC/B,UAAU,gFAAuB;AACjC;AACA,CAAC;;;;;;;;;;;;;ACjCD;AAAA;AAAA;AAAA;AAAA;AAA6C;AACiD;AAC/C;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,8DAA8D,yEAAgB;AAC9E,0DAA0D,yEAAgB;;AAE1E;AACA,SAAS,yEAAgB;AACzB,WAAW,yEAAgB;AAC3B,CAAC;;AAED,4CAA4C,yEAAgB;;AAE5D;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEO;AACP;AACA;AACA,WAAW,gFAAuB;AAClC,WAAW,gFAAuB;AAClC,YAAY,wEAAe;AAC3B;AACA;AACA;AACA,iBAAiB,oEAAa;AAC9B;AACA;AACA;AACA;AACA,wBAAwB,yEAAgB,mDAAmD,2DAAe;AAC1G;AACA;AACA;AACA;;;;;;;;;;;;;AC7GA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;;;;;;;;;;;;ACdA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEO,uBAAuB,QAAQ;AACtC,SAAS,qEAAqE;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgD;AACK;AACiB;AACxB;;AAE9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,gCAAgC,0DAAY;AAC5C,kCAAkC,6DAAc;;AAEhD;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;A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CA,gBAAgB,aAAa,iBAAiB;AAC9C,gBAAgB,aAAa,iBAAiB;AAC9C,gBAAgB,gBAAgB,oBAAoB;AACpD,gBAAgB,YAAY,gBAAgB;AAC5C;;AAEA;AACA,0IAA0I,uBAAuB;AACjK;;AAEA;AACA,2IAA2I,yBAAyB;AACpK;AACA,4GAA4G,gBAAgB;AAC5H;;AAEA,iJAAiJ,4BAA4B;AAC7K;AACA,+GAA+G,mBAAmB;AAClI;;AAEA,yIAAyI,wBAAwB;AACjK;AACA,2GAA2G,eAAe;AAC1H;;AAEA,2IAA2I,yBAAyB;AACpK;AACA,4GAA4G,gBAAgB;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,yBAAyB,iDAAS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;;AAEA;AACA,2BAA2B,SAAS,gFAAgF;AACpH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,gEAAgE;AACzF;AACA;AACA,yBAAyB,gEAAgE;AACzF;AACA;AACA,yBAAyB,gEAAgE;AACzF;AACA;AACA,yBAAyB,gEAAgE;AACzF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACpUA;AAAA;AAAA;AAAyC;;AAE1B,4BAA4B,oDAAY;AACvD;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAyC;;AAE1B,iCAAiC,oDAAY;AAC5D;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAyC;;AAEzC;AACA;AACA;AACA;AACA;AACA;;AAEe,oCAAoC,oDAAY;AAC/D;AACA;AACA;AACA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAyC;;AAEzC;AACA;AACA;AACA;AACA;AACA;;AAEe,+BAA+B,oDAAY;AAC1D;AACA;AACA;AACA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAyC;;AAEzC;AACA;AACA;AACA;AACA;;AAEe,uBAAuB,oDAAY;AAClD;AACA;AACA;AACA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAyC;;AAEzC;;AAEA,SAAS,6BAA6B;;AAEtC;AACA;AACA;AACA,iHAAiH,UAAU;AAC3H,6GAA6G,QAAQ;AACrH,iHAAiH,SAAS;AAC1H;AACA;AACA;AACA;;AAEe,mBAAmB,oDAAY;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAyC;;AAE1B,qBAAqB,oDAAY;AAChD;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAyC;;AAE1B,6BAA6B,oDAAY;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAqC;;AAEtB,oBAAoB,oDAAQ;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,uBAAuB;;AAEvB;AACA;;AAEA;AACA,iCAAiC;;AAEjC;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAyC;;AAElC;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC,iBAAiB;AACzD,wCAAwC,cAAc;AACtD,wCAAwC,gBAAgB;AACxD;AACA;;AAEe,mBAAmB,oDAAY;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAyC;;AAE1B,yBAAyB,oDAAY;AACpD;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,YAAY;AAC7B;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAyC;;AAEzC,oCAAoC,qBAAqB;AACzD;AACA,mCAAmC,cAAc;AACjD,0CAA0C,MAAM;AAChD;AACA;;AAEe,0BAA0B,oDAAY;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n","import UserProfileView from './view/user-profile.js';\nimport MenuView from './view/menu.js';\nimport MovieListPresenter from './presenter/movie-list.js';\nimport StatisticsView from './view/statistics.js';\nimport {generateFilm} from './mock/film.js'; // функция создает мок для фильма\nimport {generateUser} from './mock/user.js'; // мок для пользователя\nimport {generateFilmsMenu} from './mock/menu.js'; // счет фильмов для меню\nimport {render, BEFOREEND} from './utils/render.js';\n\nconst COMMON_FILMS_COUNT = 20;\n\n// создание моков для фильма\nconst commonFilms = new Array(COMMON_FILMS_COUNT).fill(``).map(generateFilm);\nconst filmsCount = commonFilms.length;\n// счет фильмов для меню, для статуса пользователя\nconst filmsStatusCount = generateFilmsMenu(commonFilms);\n// мок для пользователя\nconst user = generateUser(filmsStatusCount);\n\nconst headerElement = document.querySelector(`.header`);\nconst mainElement = document.querySelector(`.main`);\nconst footerStatisticsElement = document.querySelector(`.footer__statistics`);\nconst bodyElement = document.querySelector(`body`);\n\nrender(headerElement, new UserProfileView(user), BEFOREEND);\nrender(mainElement, new MenuView(filmsStatusCount), BEFOREEND);\nrender(footerStatisticsElement, new StatisticsView(filmsCount), BEFOREEND);\n\n// презентер\nconst moviePresenter = new MovieListPresenter(mainElement, bodyElement);\nmoviePresenter.init(commonFilms);\n","import {getRandomValueFromArray, generateId} from '../utils/common.js';\n\nconst EMOJIS = [\n  `./images/emoji/smile.png`,\n  `./images/emoji/sleeping.png`,\n  `./images/emoji/puke.png`,\n  `./images/emoji/angry.png`,\n];\nconst COMMENTS_TEXT = [\n  `Interesting setting and a good cast`,\n  `Booooooooooring`,\n  `Very very old. Meh`,\n  `Almost two hours? Seriously?`\n];\nconst AUTHORS = [\n  `Tim Macoveev`,\n  `John Doe`,\n  `Ivan Ivanov`,\n  `Petr Petrov`\n];\n\nconst generateRandomDateForComment = () => {\n  const start = new Date(2019, 10, 30);\n  const end = new Date();\n  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n};\n\nexport const generateComment = () => ({\n  id: generateId(),\n  emoji: getRandomValueFromArray(EMOJIS),\n  text: getRandomValueFromArray(COMMENTS_TEXT),\n  author: getRandomValueFromArray(AUTHORS),\n  time: generateRandomDateForComment(),\n});\n","import {generateComment} from './comment.js';\nimport {getRandomInteger, getRandomDouble, getRandomValueFromArray} from '../utils/common.js';\nimport {getRandomDate} from '../utils/film.js';\n\nconst GENRE_TYPES = [\n  `Musical`,\n  `Western`,\n  `Drama`,\n  `Comedy`,\n  `Cartoon`,\n  `Film - Noir`,\n  `Mystery`\n];\nconst TITLES = [\n  `The Dance of Life`,\n  `Sagebrush Trail`,\n  `The Man with the Golden Arm`,\n  `The Great Flamarion`\n];\nconst IMAGES = [\n  `./images/posters/made-for-each-other.png`,\n  `./images/posters/the-man-with-the-golden-arm.jpg`,\n  `./images/posters/the-great-flamarion.jpg`,\n  `./images/posters/the-dance-of-life.jpg`,\n  `./images/posters/santa-claus-conquers-the-martians.jpg`,\n  `./images/posters/sagebrush-trail.jpg`,\n  `./images/posters/popeye-meets-sinbad.png`,\n];\nconst SENTENCES = [\n  `Lorem ipsum dolor sit amet, consectetur adipiscing elit.`,\n  `Cras aliquet varius magna, non porta ligula feugiat eget.`,\n  `Fusce tristique felis at fermentum pharetra.`,\n  `Aliquam id orci ut lectus varius viverra.`,\n  `Nullam nunc ex, convallis sed finibus eget, sollicitudin eget ante.`,\n  `Phasellus eros mauris, condimentum sed nibh vitae, sodales efficitur ipsum.`,\n  `Sed blandit, eros vel aliquam faucibus, purus ex euismod diam, eu luctus nunc ante ut dui.`,\n  `Sed sed nisi sed augue convallis suscipit in sed felis.`,\n  `Aliquam erat volutpat.`,\n  `Nunc fermentum tortor ac porta dapibus.`,\n  `In rutrum ac purus sit amet tempus.`];\n\nconst MIN_GENRE_BOUND = 1;\n\nconst DescriptionSentences = {\n  MIN: 1,\n  MAX: 5,\n};\n\nconst HourDuration = {\n  MIN: 0,\n  MAX: 1\n};\n\nconst MinutesDuration = {\n  MIN: 1,\n  MAX: 60\n};\n\nconst BooleanValue = {\n  FALSE: 0,\n  TRUE: 1\n};\n\nconst RatingBound = {\n  MIN: 1,\n  MAX: 9\n};\n\nconst CommentBound = {\n  MIN: 0,\n  MAX: 5\n};\n\nconst generateDescription = (sentences) => sentences.slice(0, getRandomInteger(DescriptionSentences.MIN, DescriptionSentences.MAX)).join(``);\nconst generateGenre = (genreTypes) => genreTypes.slice(0, getRandomInteger(MIN_GENRE_BOUND, genreTypes.length - 1));\n\nconst generateDuration = () => ({\n  hours: getRandomInteger(HourDuration.MIN, HourDuration.MAX),\n  minutes: getRandomInteger(MinutesDuration.MIN, MinutesDuration.MAX),\n});\n\nconst getRandomBooleanValue = () => Boolean(getRandomInteger(BooleanValue.FALSE, BooleanValue.TRUE));\n\nconst generateStatus = () => ({\n  favorite: getRandomBooleanValue(),\n  watched: getRandomBooleanValue(),\n  watchlist: getRandomBooleanValue(),\n});\n\nconst generateId = () => Date.now() + parseInt(Math.random() * 10000, 10);\n\nexport const generateFilm = () => {\n  return {\n    id: generateId(),\n    image: getRandomValueFromArray(IMAGES),\n    title: getRandomValueFromArray(TITLES),\n    rating: getRandomDouble(RatingBound.MIN, RatingBound.MAX),\n    director: `Anthony Mann`,\n    writers: `Anne Wigton, Heinz Herald, Richard Weil`,\n    actors: `Erich von Stroheim, Mary Beth Hughes, Dan Duryea`,\n    releaseDate: getRandomDate(),\n    duration: generateDuration(),\n    country: `USA`,\n    genres: generateGenre(GENRE_TYPES),\n    description: generateDescription(SENTENCES),\n    comments: new Array(getRandomInteger(CommentBound.MIN, CommentBound.MAX)).fill(``).map(generateComment),\n    ageRating: `18+`,\n    status: generateStatus(),\n  };\n};\n","const countMapMenu = {\n  favorite: (values) => values.filter((element) => element.favorite).length,\n  watched: (values) => values.filter((element) => element.watched).length,\n  watchlist: (values) => values.filter((element) => element.watchlist).length,\n};\n\nexport const generateFilmsMenu = (films) => {\n  const statuses = films.map((element) => element.status);\n  const result = {};\n\n  Object.entries(countMapMenu).forEach(([countMapMenuName, countFilm]) => {\n    result[countMapMenuName] = countFilm(statuses);\n  });\n  return result;\n};\n","const WatchCount = {\n  NOVICE_LOW_BOUND: 1,\n  NOVICE_UPPER_BOUND: 10,\n  FAN_LOW_BOUND: 11,\n  FAN_UPPER_BOUND: 20,\n};\n\nexport const generateUser = ({watched}) => {\n  const {NOVICE_LOW_BOUND, NOVICE_UPPER_BOUND, FAN_LOW_BOUND, FAN_UPPER_BOUND} = WatchCount;\n\n  let userRating = ``;\n  switch (true) {\n    case watched >= NOVICE_LOW_BOUND && watched <= NOVICE_UPPER_BOUND:\n      userRating = `Novice`;\n      break;\n    case watched >= FAN_LOW_BOUND && watched <= FAN_UPPER_BOUND:\n      userRating = `Fan`;\n      break;\n    case watched > FAN_UPPER_BOUND:\n      userRating = `Movie Buff`;\n  }\n\n  return {\n    profileRating: userRating,\n    image: `images/bitmap@2x.png`\n  };\n};\n","import FilmCardView from '../view/film-card.js';\nimport FilmDetailView from '../view/film-details.js';\nimport {render, BEFOREEND, replace, remove} from '../utils/render.js';\nimport {generateId} from '../utils/common.js';\n\nconst Key = {\n  ESCAPE: `Escape`,\n  ESC: `Esc`,\n  ENTER: `Enter`,\n};\n\nconst Mode = {\n  DEFAULT: `DEFAULT`,\n  OPEN: `OPEN`\n};\n\nconst EmojiType = {\n  [`smile`]: `./images/emoji/smile.png`,\n  [`sleeping`]: `./images/emoji/sleeping.png`,\n  [`puke`]: `./images/emoji/puke.png`,\n  [`angry`]: `./images/emoji/angry.png`,\n};\n\nexport default class Film {\n  constructor(container, bodyElement, changeDate, changeMode) {\n    this._container = container;\n    this._bodyElement = bodyElement;\n    this._changeData = changeDate;\n    this._changeMode = changeMode;\n\n    this._handleEscKeyDown = this._handleEscKeyDown.bind(this);\n    this._showFilmDetail = this._showFilmDetail.bind(this);\n    this._handleWatchListClick = this._handleWatchListClick.bind(this);\n    this._handleWatchedClick = this._handleWatchedClick.bind(this);\n    this._handleFavoriteClick = this._handleFavoriteClick.bind(this);\n    this._handleDeleteButtonClick = this._handleDeleteButtonClick.bind(this);\n    this._handleEnterKeyDown = this._handleEnterKeyDown.bind(this);\n\n    this._filmCardElement = null;\n    this._filmDetailElement = null;\n    this._mode = Mode.DEFAULT;\n  }\n\n  init(film) {\n    this._film = film;\n\n    const prevFilmCardElement = this._filmCardElement;\n    const prevFilmDetailElement = this._filmDetailElement;\n\n    this._filmCardElement = new FilmCardView(film);\n    this._filmDetailElement = new FilmDetailView(film);\n\n    this._filmCardElement.setClickHandler(this._showFilmDetail);\n\n    this._filmDetailElement.setClickHandler(() => {\n      this._hideFilmDetail();\n      document.removeEventListener(`keydown`, this._handleEscKeyDown);\n      document.removeEventListener(`keydown`, this._handleEnterKeyDown);\n      this._filmDetailElement.reset(this._film);\n    });\n    this._filmCardElement.setWatchListClickHandler(this._handleWatchListClick);\n    this._filmCardElement.setWatchedClickHandler(this._handleWatchedClick);\n    this._filmCardElement.setFavoriteClickHandler(this._handleFavoriteClick);\n\n    this._filmDetailElement.setWatchListClickHandler(this._handleWatchListClick);\n    this._filmDetailElement.setWatchedClickHandler(this._handleWatchedClick);\n    this._filmDetailElement.setFavoriteClickHandler(this._handleFavoriteClick);\n    this._filmDetailElement.setDeleteButtonClickHandler(this._handleDeleteButtonClick);\n    this._filmDetailElement.setEnterKeyDown(this._handleEnterKeyDown);\n\n    if (prevFilmCardElement === null || prevFilmDetailElement === null) {\n      render(this._container, this._filmCardElement, BEFOREEND);\n      return;\n    }\n\n    if (this._container.getElement().contains(prevFilmCardElement.getElement())) {\n      replace(this._filmCardElement, prevFilmCardElement);\n    }\n\n    if (this._bodyElement.contains(prevFilmDetailElement.getElement())) {\n      replace(this._filmDetailElement, prevFilmDetailElement);\n    }\n\n    remove(prevFilmCardElement);\n    remove(prevFilmDetailElement);\n  }\n\n  destroy() {\n    remove(this._filmCardElement);\n    remove(this._filmDetailElement);\n  }\n\n  _handleEscKeyDown(evt) {\n    if (evt.key === Key.ESCAPE || evt.key === Key.ESC) {\n      evt.preventDefault();\n      this._hideFilmDetail();\n      document.removeEventListener(`keydown`, this._handleEscKeyDown);\n      document.removeEventListener(`keydown`, this._handleEnterKeyDown);\n      this._filmDetailElement.reset(this._film);\n    }\n  }\n\n  _hideFilmDetail() {\n    remove(this._filmDetailElement);\n\n    this._bodyElement.classList.remove(`hide-overflow`);\n    this._mode = Mode.DEFAULT;\n  }\n\n  _showFilmDetail() {\n    this._changeMode();\n    this._filmDetailElement.updateElement();\n    this._bodyElement.appendChild(this._filmDetailElement.getElement());\n\n    this._bodyElement.classList.add(`hide-overflow`);\n    document.addEventListener(`keydown`, this._handleEscKeyDown);\n    document.addEventListener(`keydown`, this._handleEnterKeyDown);\n    this._mode = Mode.OPEN;\n  }\n\n  // изменения данных\n  _handleWatchListClick() {\n    this._changeData(Object.assign({}, this._film, {status: {watchlist: !this._film.status.watchlist, favorite: this._film.status.favorite, watched: this._film.status.watched}}));\n  }\n\n  _handleWatchedClick() {\n    this._changeData(Object.assign({}, this._film, {status: {watched: !this._film.status.watched, favorite: this._film.status.favorite, watchlist: this._film.status.watchlist}}));\n  }\n\n  _handleFavoriteClick() {\n    this._changeData(Object.assign({}, this._film, {status: {favorite: !this._film.status.favorite, watchlist: this._film.status.watchlist, watched: this._film.status.watched}}));\n  }\n\n  _handleDeleteButtonClick(commentId) {\n    const newComments = this._film.comments.filter((comment) => comment.id !== parseInt(commentId, 10));\n    this._changeData(Object.assign({}, this._film, {comments: newComments.slice(0)}));\n  }\n\n  _handleEnterKeyDown(evt) {\n    if (evt.key === Key.ENTER) {\n      const userMessage = this._filmDetailElement.returnUserMessage();\n      const selectedEmojiType = this._filmDetailElement.returnSelectedEmojiType();\n      if (userMessage && selectedEmojiType) {\n        const userComment = {\n          id: generateId(),\n          emoji: EmojiType[selectedEmojiType],\n          text: userMessage,\n          author: `Anonim`,\n          time: new Date(),\n        };\n        const newComments = this._film.comments.slice(0);\n        newComments.push(userComment);\n        this._changeData(Object.assign({}, this._film, {comments: newComments.slice(0)}));\n      }\n    }\n  }\n\n  resetView() {\n    if (this._mode !== Mode.DEFAULT) {\n      this._hideFilmDetail();\n      this._bodyElement.classList.add(`hide-overflow`);\n    }\n  }\n}\n","import SortView, {SortType} from '../view/sort.js';\nimport FilmContainerView from '../view/films-container.js';\nimport FilmListView from '../view/films-list.js';\nimport FilmsListContainerView from '../view/films-list-container.js';\nimport FilmListTopRatedView from '../view/films-list-top-rated.js';\nimport FilmListMostCommentedView from '../view/films-list-most-commented.js';\nimport ShowMoreButtonView from '../view/show-more-button.js';\nimport NoFilmView from '../view/no-film.js';\nimport {render, BEFOREEND, remove} from '../utils/render.js';\nimport {sortByDate, sortByRating} from '../utils/film.js';\nimport FilmPresenter from './film.js';\nimport {updateItem} from '../utils/common.js';\n\nconst CountType = {\n  COMMON_FILMS: 20,\n  EXTRA_FILMS: 2,\n  RENDER_FOR_STEP: 5,\n};\n\nexport default class MovieList {\n  constructor(mainElement, bodyElement) {\n    this._bodyElement = bodyElement; // body страницы\n    this._mainElement = mainElement; // родитель для всех элементов ниже\n    this._sortElement = new SortView();\n    this._filmsContainerElement = new FilmContainerView(); // главный контейнер для фильмов\n    this._filmsListElement = new FilmListView(); // первый внут. контейнер для всех фильмов\n    this._filmsListContainerElement = new FilmsListContainerView(); // второй внут. контейнер для фильмов, в нем распорожены фильмы\n    this._filmListTopRatedElement = new FilmListTopRatedView();\n    this._filmListMostCommentedElement = new FilmListMostCommentedView();\n    this._showMoreButtonElement = new ShowMoreButtonView();\n    this._noFilmElement = new NoFilmView();\n    this._renderFilmCount = CountType.RENDER_FOR_STEP;\n\n    this._handleShomMoreButtonElementClick = this._handleShomMoreButtonElementClick.bind(this);\n    this._handleSortTypeChange = this._handleSortTypeChange.bind(this);\n    this._handleFilmChange = this._handleFilmChange.bind(this);\n    this._handleModeChange = this._handleModeChange.bind(this);\n\n    this._currenSortType = SortType.DEFAULT;\n    this._filmPresenter = {};\n    this._filmTopRatedPresenter = {};\n    this._filmMostCommentedPresenter = {};\n  }\n\n  init(films) {\n    this._renderSort();\n    render(this._mainElement, this._filmsContainerElement, BEFOREEND);\n    render(this._filmsContainerElement, this._filmsListElement, BEFOREEND);\n    if (!films.length) {\n      this._renderNoFilmElement();\n      return;\n    }\n    this._sourceFilms = films.slice(); // сохраняем исходный массив для сортировки\n    this._films = films.slice();\n    this._topRatedFilms = films.slice().sort((firstFilm, secondFilm) => secondFilm.rating - firstFilm.rating);\n    this._mostCommentedFilms = films.slice().sort((firstFilm, secondFilm) => secondFilm.comments.length - firstFilm.comments.length);\n\n    render(this._filmsListElement, this._filmsListContainerElement, BEFOREEND);\n    this._renderFilmsList();\n\n    // отрисовка Top rated и Most commented компонентов с фильмами\n    this._renderTopRatedBoard(this._topRatedFilms.slice(0, CountType.EXTRA_FILMS));\n    this._renderMostCommentedBoard(this._mostCommentedFilms.slice(0, CountType.EXTRA_FILMS));\n  }\n\n  _handleModeChange() {\n    Object\n      .values(this._filmPresenter)\n      .forEach((presenter) => presenter.resetView());\n  }\n\n  // -------сортировка\n  _renderSort() {\n    render(this._mainElement, this._sortElement, BEFOREEND);\n    this._sortElement.setSortTypeChangeHandler(this._handleSortTypeChange);\n  }\n\n  _handleSortTypeChange(sortType) {\n    if (this._currenSortType === sortType) {\n      return;\n    }\n    this._sortFilms(sortType);\n    this._clearFilmList();\n    this._renderFilmsList();\n  }\n\n  _sortFilms(sortType) {\n    switch (sortType) {\n      case SortType.DATE:\n        this._films.sort(sortByDate);\n        break;\n      case SortType.RATING:\n        this._films.sort(sortByRating);\n        break;\n      default:\n        this._films = this._sourceFilms.slice();\n    }\n    this._currenSortType = sortType;\n  }\n  // -----конец сортировки\n\n  // удаляет каждый фильм\n  _clearFilmList() {\n    Object.values(this._filmPresenter)\n      .forEach((presenter) => presenter.destroy());\n    this._filmPresenter = {};\n    this._renderFilmCount = CountType.RENDER_FOR_STEP;\n  }\n\n  _renderTopRatedBoard(films) {\n    const filmListContainerElement = new FilmsListContainerView();\n    render(this._filmsContainerElement, this._filmListTopRatedElement, BEFOREEND);\n    render(this._filmListTopRatedElement, filmListContainerElement, BEFOREEND);\n    films.forEach((film) => this._renderTopRatedFilm(filmListContainerElement, film));\n  }\n\n  _renderMostCommentedBoard(films) {\n    const filmListContainerElement = new FilmsListContainerView();\n    render(this._filmsContainerElement, this._filmListMostCommentedElement, BEFOREEND);\n    render(this._filmListMostCommentedElement, filmListContainerElement, BEFOREEND);\n    films.forEach((film) => this._renderMostCommenterFilm(filmListContainerElement, film));\n  }\n\n  _renderFilmsList() {\n    this._renderFilms(0, Math.min(this._films.length, CountType.RENDER_FOR_STEP));\n    if (this._films.length > CountType.RENDER_FOR_STEP) {\n      this._renderShowMoreButton();\n    }\n  }\n\n  _renderFilms(from, to) {\n    this._films\n      .slice(from, to)\n      .forEach((film) => this._renderFilm(this._filmsListContainerElement, film));\n  }\n\n  // отрисовка карточки с фильмом и добавление событий\n  _renderFilm(container, film) {\n    const filmPresenter = new FilmPresenter(container, this._bodyElement, this._handleFilmChange, this._handleModeChange);\n    filmPresenter.init(film);\n    this._filmPresenter[film.id] = filmPresenter;\n  }\n\n  _renderTopRatedFilm(container, film) {\n    const filmPresenter = new FilmPresenter(container, this._bodyElement, this._handleFilmChange);\n    filmPresenter.init(film);\n    this._filmTopRatedPresenter[film.id] = filmPresenter;\n  }\n\n  _renderMostCommenterFilm(container, film) {\n    const filmPresenter = new FilmPresenter(container, this._bodyElement, this._handleFilmChange);\n    filmPresenter.init(film);\n    this._filmMostCommentedPresenter[film.id] = filmPresenter;\n  }\n\n  _renderNoFilmElement() {\n    render(this._filmsListElement, this._noFilmElement, BEFOREEND);\n  }\n\n  _renderShowMoreButton() {\n    render(this._filmsListElement, this._showMoreButtonElement, BEFOREEND);\n    this._showMoreButtonElement.setClickHandler(this._handleShomMoreButtonElementClick);\n  }\n\n  _handleShomMoreButtonElementClick() {\n    this._renderFilms(this._renderFilmCount, this._renderFilmCount + CountType.RENDER_FOR_STEP);\n    this._renderFilmCount += CountType.RENDER_FOR_STEP;\n    if (this._renderFilmCount >= this._films.length) {\n      remove(this._showMoreButtonElement);\n    }\n  }\n\n  // обработчик изменения данных - этот метод передается в presenter/film как changeData\n  _handleFilmChange(updatedFilm) {\n    this._films = updateItem(this._films, updatedFilm);\n    this._sourceFilms = updateItem(this._sourceFilms, updatedFilm);\n    this._filmPresenter[updatedFilm.id].init(updatedFilm); // инициализация фильма с изм. данными\n  }\n}\n","export const getRandomInteger = (min = 0, max = 1) => {\n  const lower = Math.ceil(Math.min(min, max));\n  const upper = Math.floor(Math.max(min, max));\n\n  return Math.floor(lower + Math.random() * (upper - lower + 1));\n};\n\nexport const getRandomValueFromArray = (values) => values[getRandomInteger(0, values.length - 1)];\n\nexport const getRandomDouble = (min, max) => {\n  const lower = Math.ceil(Math.min(min, max));\n  const upper = Math.floor(Math.max(min, max));\n\n  return (lower + Math.random() * (upper - lower + 1)).toFixed(1);\n};\n\nexport const updateItem = (items, update) => {\n  const index = items.findIndex((item) => item.id === update.id);\n\n  if (index === -1) {\n    return items;\n  }\n\n  return [\n    ...items.slice(0, index),\n    update,\n    ...items.slice(index + 1)\n  ];\n};\n\nexport const generateId = () => Date.now() + parseInt(Math.random() * 10000, 10);\n","export const getRandomDate = () => {\n  const start = new Date(1940, 10, 30);\n  const end = new Date();\n  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n};\n\nexport const getHumanizeViewFromDuration = ({hours, minutes}) => {\n  let humanizeTimeString = ``;\n  humanizeTimeString += hours ? `${hours}h ` : ``;\n  humanizeTimeString += minutes ? `${minutes}m` : ``;\n\n  return humanizeTimeString;\n};\n\nexport const sortByDate = (firstFilm, secondFilm) => secondFilm.releaseDate.getTime() - firstFilm.releaseDate.getTime();\n\nexport const sortByRating = (firstFilm, secondFilm) => secondFilm.rating - firstFilm.rating;\n","import AbstractView from '../view/abstract.js';\n\nexport const BEFOREEND = `beforeend`;\n\nexport const renderTemplate = (container, template, place) => {\n  if (container instanceof AbstractView) {\n    container.getElement();\n  }\n  container.insertAdjacentHTML(place, template);\n};\n\nexport const render = (container, child, place) => {\n  if (container instanceof AbstractView) {\n    container = container.getElement();\n  }\n  if (child instanceof AbstractView) {\n    child = child.getElement();\n  }\n\n  if (place === BEFOREEND) {\n    container.append(child);\n  } else {\n    throw new Error(`Передано некорректное place в функцию render`);\n  }\n};\n\nexport const createElement = (template) => {\n  const newElement = document.createElement(`div`);\n  newElement.innerHTML = template;\n\n  return newElement.firstChild;\n};\n\nexport const remove = (component) => {\n  if (!(component instanceof AbstractView)) {\n    throw new Error(`Can remove only components`);\n  }\n\n  component.getElement().remove();\n  component.removeElement();\n};\n\nexport const replace = (newChild, oldChild) => {\n  if (oldChild instanceof AbstractView) {\n    oldChild = oldChild.getElement();\n  }\n\n  if (newChild instanceof AbstractView) {\n    newChild = newChild.getElement();\n  }\n\n  const parent = oldChild.parentElement;\n\n  if (parent === null || oldChild === null || newChild === null) {\n    throw new Error(`Can't replace unexisting elements`);\n  }\n\n  parent.replaceChild(newChild, oldChild);\n};\n","import {createElement} from '../utils/render.js';\n\nexport default class Abstract {\n  constructor() {\n    if (new.target === Abstract) {\n      throw new Error(`Can't instantiate Abstract, only concrete one.`);\n    }\n    this._element = null;\n    this._callback = {};\n  }\n\n  getTemplate() {\n    throw new Error(`getTemplate method Abstract class`);\n  }\n\n  getElement() {\n    if (!this._element) {\n      this._element = createElement(this.getTemplate());\n    }\n    return this._element;\n  }\n\n  removeElement() {\n    this._element = null;\n  }\n}\n","import {getHumanizeViewFromDuration} from '../utils/film.js';\nimport {getRandomValueFromArray} from '../utils/common.js';\nimport AbstractView from './abstract.js';\n\nconst getStringYearFromDate = (releaseDate) => {\n  let date = releaseDate.toLocaleString(`en-GB`, {day: `numeric`, month: `long`, year: `numeric`});\n  return date.slice(date.length - 4, date.length);\n};\n\nexport const createFilmCardTemplate = (film) => {\n\n  const {title, rating, releaseDate, duration, genres, image, description, comments, status} = film;\n  const {favorite, watched, watchlist} = status;\n  const genre = getRandomValueFromArray(genres);\n  const year = getStringYearFromDate(releaseDate);\n  const humanizeDuration = getHumanizeViewFromDuration(duration);\n\n  return `<article class=\"film-card\">\n      <h3 class=\"film-card__title\">${title}</h3>\n      <p class=\"film-card__rating\">${rating}</p>\n      <p class=\"film-card__info\">\n        <span class=\"film-card__year\">${year}</span>\n        <span class=\"film-card__duration\">${humanizeDuration}</span>\n        <span class=\"film-card__genre\">${genre}</span>\n      </p>\n      <img src=\"${image}\" alt=\"\" class=\"film-card__poster\">\n      <p class=\"film-card__description\">${description}</p>\n      <a class=\"film-card__comments\">${comments.length} comments</a>\n      <form class=\"film-card__controls\">\n        <button class=\"film-card__controls-item button film-card__controls-item--add-to-watchlist ${watchlist ? `film-card__controls-item--active` : ``}\">Add to watchlist</button>\n        <button class=\"film-card__controls-item button film-card__controls-item--mark-as-watched ${watched ? `film-card__controls-item--active` : ``}\">Mark as watched</button>\n        <button class=\"film-card__controls-item button film-card__controls-item--favorite ${favorite ? `film-card__controls-item--active` : ``}\">Mark as favorite</button>\n      </form>\n    </article>`;\n};\n\nexport default class FilmCard extends AbstractView {\n  constructor(film) {\n    super();\n    this._film = film;\n    this._clickHandler = this._clickHandler.bind(this);\n\n    this._watchListClickHandler = this._watchListClickHandler.bind(this);\n    this._watchedClickHandler = this._watchedClickHandler.bind(this);\n    this._favoriteClickHandler = this._favoriteClickHandler.bind(this);\n  }\n\n  getTemplate() {\n    return createFilmCardTemplate(this._film);\n  }\n\n  _clickHandler() {\n    this._callback.click();\n  }\n\n  setClickHandler(callback) {\n    this._callback.click = callback;\n    this.getElement()\n      .querySelectorAll(`.film-card__poster, .film-card__comments, .film-card__title`)\n      .forEach((element) => {\n        element.addEventListener(`click`, this._clickHandler);\n      });\n  }\n\n  setWatchListClickHandler(callback) {\n    this._callback.watchListClick = callback;\n    this.getElement().querySelector(`.film-card__controls-item--add-to-watchlist`).addEventListener(`click`, this._watchListClickHandler);\n  }\n\n  _watchListClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.watchListClick();\n  }\n\n  setWatchedClickHandler(callback) {\n    this._callback.watchedClick = callback;\n    this.getElement().querySelector(`.film-card__controls-item--mark-as-watched`).addEventListener(`click`, this._watchedClickHandler);\n  }\n\n  _watchedClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.watchedClick();\n  }\n\n  setFavoriteClickHandler(callback) {\n    this._callback.favoriteClick = callback;\n    this.getElement().querySelector(`.film-card__controls-item--favorite`).addEventListener(`click`, this._favoriteClickHandler);\n  }\n\n  _favoriteClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.favoriteClick();\n  }\n}\n","import {getHumanizeViewFromDuration} from '../utils/film.js';\nimport SmartView from './smart.js';\nconst EmojiImage = {\n  SMILE: `<img src=\"images/emoji/smile.png\" width=\"55\" height=\"55\" alt=\"emoji\">`,\n  SLEEPING: `<img src=\"images/emoji/sleeping.png\" width=\"55\" height=\"55\" alt=\"emoji\">`,\n  PUKE: `<img src=\"images/emoji/puke.png\" width=\"55\" height=\"55\" alt=\"emoji\"></img>`,\n  ANGRY: `<img src=\"images/emoji/angry.png\" width=\"55\" height=\"55\" alt=\"emoji\"></img>`\n};\n\nconst EmojiType = {\n  SMILE: `smile`,\n  SLEEPING: `sleeping`,\n  PUKE: `puke`,\n  ANGRY: `angry`\n};\n\nconst generateGenres = (genres) => {\n  let result = ``;\n  for (let i = 0; i < genres.length; i++) {\n    result += `<span class=\"film-details__genre\">${genres[i]}</span>`;\n  }\n  return result;\n};\n\nconst generateComments = (comments) => {\n  return comments.map((element) => `<li class=\"film-details__comment\">\n  <span class=\"film-details__comment-emoji\">\n    <img src=\"${element.emoji}\" width=\"55\" height=\"55\" alt=\"emoji-smile\">\n  </span>\n  <div>\n    <p class=\"film-details__comment-text\">${element.text}</p>\n    <p class=\"film-details__comment-info\">\n      <span class=\"film-details__comment-author\">${element.author}</span>\n      <span class=\"film-details__comment-day\">${convertDateToString(element.time)}</span>\n      <button class=\"film-details__comment-delete\" data-comment-id =\"${element.id}\">Delete</button>\n    </p>\n  </div>\n</li>`).join(``);\n};\n\nconst generateControls = ({favorite, watched, watchlist}) => {\n  return `<input type=\"checkbox\" class=\"film-details__control-input visually-hidden\" id=\"watchlist\" name=\"watchlist\" ${watchlist ? `checked` : ``}>\n    <label for=\"watchlist\" class=\"film-details__control-label film-details__control-label--watchlist\">Add to watchlist</label>\n\n    <input type=\"checkbox\" class=\"film-details__control-input visually-hidden\" id=\"watched\" name=\"watched\" ${watched ? `checked` : ``}>\n    <label for=\"watched\" class=\"film-details__control-label film-details__control-label--watched\">Already watched</label>\n\n    <input type=\"checkbox\" class=\"film-details__control-input visually-hidden\" id=\"favorite\" name=\"favorite\" ${favorite ? `checked` : ``}>\n    <label for=\"favorite\" class=\"film-details__control-label film-details__control-label--favorite\">Add to favorites</label>`;\n};\n\nconst convertDateToString = (date) => `${date.getFullYear()}/${date.getMonth()}/${date.getDate()} ${date.getHours()}:${date.getMinutes()}`;\n\nconst createFilmDetailsTemplate = (film) => {\n\n  const {image, title, rating, director, writers, actors, releaseDate, duration, country, genres, description, comments, ageRating, status, isSmile, isAngry, isSleeping, isPuke, message} = film;\n  const genreFieldName = genres.length > 1 ? `Genres` : `Genre`;\n  const commentsCount = comments.length;\n  const humanizeDuration = getHumanizeViewFromDuration(duration);\n\n  return `<section class=\"film-details\">\n      <form class=\"film-details__inner\" action=\"\" method=\"get\">\n        <div class=\"form-details__top-container\">\n          <div class=\"film-details__close\">\n            <button class=\"film-details__close-btn\" type=\"button\">close</button>\n          </div>\n          <div class=\"film-details__info-wrap\">\n            <div class=\"film-details__poster\">\n              <img class=\"film-details__poster-img\" src=\"${image}\" alt=\"\">\n              <p class=\"film-details__age\">${ageRating}</p>\n            </div>\n\n            <div class=\"film-details__info\">\n              <div class=\"film-details__info-head\">\n                <div class=\"film-details__title-wrap\">\n                  <h3 class=\"film-details__title\">${title}</h3>\n                  <p class=\"film-details__title-original\">Original: ${title}</p>\n                </div>\n\n                <div class=\"film-details__rating\">\n                  <p class=\"film-details__total-rating\">${rating}</p>\n                </div>\n              </div>\n\n              <table class=\"film-details__table\">\n                <tr class=\"film-details__row\">\n                  <td class=\"film-details__term\">Director</td>\n                  <td class=\"film-details__cell\">${director}</td>\n                </tr>\n                <tr class=\"film-details__row\">\n                  <td class=\"film-details__term\">Writers</td>\n                  <td class=\"film-details__cell\">${writers}</td>\n                </tr>\n                <tr class=\"film-details__row\">\n                  <td class=\"film-details__term\">Actors</td>\n                  <td class=\"film-details__cell\">${actors}</td>\n                </tr>\n                <tr class=\"film-details__row\">\n                  <td class=\"film-details__term\">Release Date</td>\n                  <td class=\"film-details__cell\">${releaseDate.toLocaleString(`en-GB`, {day: `numeric`, month: `long`, year: `numeric`})}</td>\n                </tr>\n                <tr class=\"film-details__row\">\n                  <td class=\"film-details__term\">Runtime</td>\n                  <td class=\"film-details__cell\">${humanizeDuration}</td>\n                </tr>\n                <tr class=\"film-details__row\">\n                  <td class=\"film-details__term\">Country</td>\n                  <td class=\"film-details__cell\">${country}</td>\n                </tr>\n                <tr class=\"film-details__row\">\n                  <td class=\"film-details__term\">${genreFieldName}</td>\n                  <td class=\"film-details__cell\">\n                  ${generateGenres(genres)}\n                  </td>\n                </tr>\n              </table>\n\n              <p class=\"film-details__film-description\">\n                ${description}\n              </p>\n            </div>\n          </div>\n\n          <section class=\"film-details__controls\">\n            ${generateControls(status)}\n          </section>\n        </div>\n\n        <div class=\"form-details__bottom-container\">\n          <section class=\"film-details__comments-wrap\">\n            <h3 class=\"film-details__comments-title\">Comments <span class=\"film-details__comments-count\">${commentsCount}</span></h3>\n\n            <ul class=\"film-details__comments-list\">\n            ${generateComments(comments)}\n            </ul>\n\n            <div class=\"film-details__new-comment\">\n              <div for=\"add-emoji\" class=\"film-details__add-emoji-label\">\n              ${isSmile ? `${EmojiImage.SMILE}` : ``}\n              ${isAngry ? `${EmojiImage.ANGRY}` : ``}\n              ${isSleeping ? `${EmojiImage.SLEEPING}` : ``}\n              ${isPuke ? `${EmojiImage.PUKE}` : ``}\n              </div>\n\n              <label class=\"film-details__comment-label\">\n                <textarea class=\"film-details__comment-input\" placeholder=\"Select reaction below and write comment here\" name=\"comment\">${message ? message : ``}</textarea>\n              </label>\n\n              <div class=\"film-details__emoji-list\">\n                <input class=\"film-details__emoji-item visually-hidden\" name=\"comment-emoji\" type=\"radio\" id=\"emoji-smile\" value=\"smile\" ${isSmile ? `checked` : ``}>\n                <label class=\"film-details__emoji-label\" for=\"emoji-smile\">\n                  <img src=\"./images/emoji/smile.png\" width=\"30\" height=\"30\" alt=\"emoji\" data-emoji-type=\"${EmojiType.SMILE}\">\n                </label>\n\n                <input class=\"film-details__emoji-item visually-hidden\" name=\"comment-emoji\" type=\"radio\" id=\"emoji-sleeping\" value=\"sleeping\" ${isSleeping ? `checked` : ``}>\n                <label class=\"film-details__emoji-label\" for=\"emoji-sleeping\">\n                  <img src=\"./images/emoji/sleeping.png\" width=\"30\" height=\"30\" alt=\"emoji\" data-emoji-type=\"${EmojiType.SLEEPING}\">\n                </label>\n\n                <input class=\"film-details__emoji-item visually-hidden\" name=\"comment-emoji\" type=\"radio\" id=\"emoji-puke\" value=\"puke\" ${isPuke ? `checked` : ``}>\n                <label class=\"film-details__emoji-label\" for=\"emoji-puke\">\n                  <img src=\"./images/emoji/puke.png\" width=\"30\" height=\"30\" alt=\"emoji\" data-emoji-type=\"${EmojiType.PUKE}\">\n                </label>\n\n                <input class=\"film-details__emoji-item visually-hidden\" name=\"comment-emoji\" type=\"radio\" id=\"emoji-angry\" value=\"angry\" ${isAngry ? `checked` : ``}>\n                <label class=\"film-details__emoji-label\" for=\"emoji-angry\">\n                  <img src=\"./images/emoji/angry.png\" width=\"30\" height=\"30\" alt=\"emoji\" data-emoji-type=\"${EmojiType.ANGRY}\">\n                </label>\n              </div>\n            </div>\n          </section>\n        </div>\n    </form>\n    </section>`;\n};\n\nexport default class FilmDetail extends SmartView {\n  constructor(film) {\n    super();\n    this._data = FilmDetail.parseFilmToData(film);\n    this._clickHandler = this._clickHandler.bind(this);\n    this._watchListClickHandler = this._watchListClickHandler.bind(this);\n    this._watchedClickHandler = this._watchedClickHandler.bind(this);\n    this._favoriteClickHandler = this._favoriteClickHandler.bind(this);\n    this._deleteButtonClickHandler = this._deleteButtonClickHandler.bind(this);\n    this._emojiClickHandler = this._emojiClickHandler.bind(this);\n    this._commentInputHandler = this._commentInputHandler.bind(this);\n    this._setInnerHandler();\n  }\n\n  _setInnerHandler() {\n    // emoji\n    this.getElement()\n      .querySelectorAll(`.film-details__emoji-label`)\n      .forEach((element) => element.addEventListener(`click`, this._emojiClickHandler));\n\n    this.getElement()\n      .querySelector(`.film-details__comment-input`)\n      .addEventListener(`input`, this._commentInputHandler);\n  }\n\n  restoreHandlers() {\n    this._setInnerHandler();\n    this.setWatchListClickHandler(this._callback.watchListClick);\n    this.setWatchedClickHandler(this._callback.watchedClick);\n    this.setFavoriteClickHandler(this._callback.favoriteClick);\n    this.setDeleteButtonClickHandler(this._callback.deleteButtonClick);\n    this.setClickHandler(this._callback.click);\n    this.setEnterKeyDown(this._callback.enterKeyDown);\n  }\n\n  _commentInputHandler(evt) {\n    evt.preventDefault();\n    this.updateData({message: evt.target.value}, true);\n  }\n\n  static parseFilmToData(film) {\n    return Object.assign({}, film, {isSmile: false, isAngry: false, isPuke: false, isSleeping: false, message: null});\n  }\n\n  getTemplate() {\n    return createFilmDetailsTemplate(this._data);\n  }\n\n  _clickHandler(evt) {\n    evt.preventDefault();\n    this._callback.click();\n  }\n\n  setEnterKeyDown(callback) {\n    this._callback.enterKeyDown = callback;\n  }\n\n  setClickHandler(callback) {\n    this._callback.click = callback;\n    this.getElement().querySelector(`.film-details__close-btn`).addEventListener(`click`, this._clickHandler);\n  }\n\n  setWatchListClickHandler(callback) {\n    this._callback.watchListClick = callback;\n    this.getElement().querySelector(`.film-details__control-label--watchlist`).addEventListener(`click`, this._watchListClickHandler);\n  }\n\n  _watchListClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.watchListClick();\n  }\n\n  setWatchedClickHandler(callback) {\n    this._callback.watchedClick = callback;\n    this.getElement().querySelector(`.film-details__control-label--watched`).addEventListener(`click`, this._watchedClickHandler);\n  }\n\n  _watchedClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.watchedClick();\n  }\n\n  setFavoriteClickHandler(callback) {\n    this._callback.favoriteClick = callback;\n    this.getElement().querySelector(`.film-details__control-label--favorite`).addEventListener(`click`, this._favoriteClickHandler);\n  }\n\n  _favoriteClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.favoriteClick();\n  }\n\n  setDeleteButtonClickHandler(callback) {\n    this._callback.deleteButtonClick = callback;\n    this.getElement()\n      .querySelectorAll(`.film-details__comment-delete`)\n      .forEach((element) => element.addEventListener(`click`, this._deleteButtonClickHandler));\n  }\n\n  _deleteButtonClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.deleteButtonClick(evt.target.dataset.commentId);\n  }\n\n  _emojiClickHandler(evt) {\n    this._updateEmoji(evt.target.dataset.emojiType);\n  }\n\n  _updateEmoji(emojiType) {\n    switch (emojiType) {\n      case EmojiType.SMILE:\n        this.updateData({isSmile: true, isAngry: false, isPuke: false, isSleeping: false});\n        break;\n      case EmojiType.SLEEPING:\n        this.updateData({isSmile: false, isAngry: false, isPuke: false, isSleeping: true});\n        break;\n      case EmojiType.ANGRY:\n        this.updateData({isSmile: false, isAngry: true, isPuke: false, isSleeping: false});\n        break;\n      case EmojiType.PUKE:\n        this.updateData({isSmile: false, isAngry: false, isPuke: true, isSleeping: false});\n        break;\n    }\n  }\n\n  returnSelectedEmojiType() {\n    if (this._data.isAngry || this._data.isPuke || this._data.isSleeping || this._data.isSmile) {\n      switch (true) {\n        case this._data.isAngry:\n          return EmojiType.ANGRY;\n        case this._data.isPuke:\n          return EmojiType.PUKE;\n        case this._data.isSleeping:\n          return EmojiType.SLEEPING;\n        case this._data.isSmile:\n          return EmojiType.SMILE;\n      }\n    }\n    return false;\n  }\n\n  returnUserMessage() {\n    return this._data.message;\n  }\n\n  reset(film) {\n    this.updateData(FilmDetail.parseFilmToData(film));\n  }\n}\n","import AbstractView from './abstract.js';\n\nexport default class FilmContainer extends AbstractView {\n  getTemplate() {\n    return `<section class=\"films\"></section>`;\n  }\n}\n","import AbstractView from './abstract.js';\n\nexport default class FilmsListContainer extends AbstractView {\n  getTemplate() {\n    return `<div class=\"films-list__container\"></div>`;\n  }\n}\n","import AbstractView from './abstract.js';\n\nconst createFilmsListMostCommentedTemplate = () => {\n  return `<section class=\"films-list--extra\">\n      <h2 class=\"films-list__title\">Most commented</h2>\n    </section>\n  `;\n};\n\nexport default class FilmListMostCommented extends AbstractView {\n  getTemplate() {\n    return createFilmsListMostCommentedTemplate();\n  }\n}\n","import AbstractView from './abstract.js';\n\nconst createFilmsListTopRatedTemplate = () => {\n  return `<section class=\"films-list--extra\">\n      <h2 class=\"films-list__title\">Top rated</h2>\n    </section>\n  `;\n};\n\nexport default class FilmListTopRated extends AbstractView {\n  getTemplate() {\n    return createFilmsListTopRatedTemplate();\n  }\n}\n","import AbstractView from './abstract.js';\n\nconst createFilmsListTemplate = () => {\n  return `<section class=\"films-list\">\n      <h2 class=\"films-list__title visually-hidden\">All movies. Upcoming</h2>\n    </section>`;\n};\n\nexport default class FilmList extends AbstractView {\n  getTemplate() {\n    return createFilmsListTemplate();\n  }\n}\n","import AbstractView from './abstract.js';\n\nconst createMenuTemplate = (countFilmsStatus) => {\n\n  const {watchlist, watched, favorite} = countFilmsStatus;\n\n  return `<nav class=\"main-navigation\">\n      <div class=\"main-navigation__items\">\n        <a href=\"#all\" class=\"main-navigation__item main-navigation__item--active\">All movies</a>\n        <a href=\"#watchlist\" class=\"main-navigation__item\">Watchlist <span class=\"main-navigation__item-count\">${watchlist}</span></a>\n        <a href=\"#history\" class=\"main-navigation__item\">History <span class=\"main-navigation__item-count\">${watched}</span></a>\n        <a href=\"#favorites\" class=\"main-navigation__item\">Favorites <span class=\"main-navigation__item-count\">${favorite}</span></a>\n      </div>\n      <a href=\"#stats\" class=\"main-navigation__additional\">Stats</a>\n    </nav>`;\n};\n\nexport default class Menu extends AbstractView {\n  constructor(countFilmsStatus) {\n    super();\n    this._countFilmsStatus = countFilmsStatus;\n  }\n\n  getTemplate() {\n    return createMenuTemplate(this._countFilmsStatus);\n  }\n}\n","import AbstractView from './abstract.js';\n\nexport default class NoFilm extends AbstractView {\n  getTemplate() {\n    return `<h2 class=\"films-list__title\">There are no movies in our database</h2>`;\n  }\n}\n","import AbstractView from './abstract.js';\n\nexport default class ShowMoreButton extends AbstractView {\n  constructor() {\n    super();\n    this._clickHandler = this._clickHandler.bind(this);\n  }\n\n  getTemplate() {\n    return `<button class=\"films-list__show-more\">Show more</button>`;\n  }\n\n  _clickHandler(evt) {\n    evt.preventDefault();\n    this._callback.click();\n  }\n\n  setClickHandler(callback) {\n    this._callback.click = callback;\n    this.getElement().addEventListener(`click`, this._clickHandler);\n  }\n}\n","import Abstract from './abstract.js';\n\nexport default class Smart extends Abstract {\n  constructor() {\n    super();\n    this._data = {};\n  }\n\n  restoreHandlers() {\n    throw new Error(`Метод restoreHandlers надо переопределить`);\n  }\n\n  updateElement() {\n    let prevElement = this.getElement();\n    const parent = prevElement.parentElement;\n    this.removeElement();\n\n    const newElement = this.getElement();\n\n    parent.replaceChild(newElement, prevElement);\n    prevElement = null; // Чтобы окончательно \"убить\" ссылку на prevElement\n\n    this.restoreHandlers();\n  }\n\n  updateData(update, isJustDataUpdating = false) {\n    this._data = Object.assign({}, this._data, update);\n\n    if (isJustDataUpdating) {\n      return;\n    }\n\n    this.updateElement();\n  }\n}\n","import AbstractView from './abstract.js';\n\nexport const SortType = {\n  DEFAULT: `default`,\n  DATE: `date`,\n  RATING: `rating`\n};\n\nconst createSortTemplate = () => {\n  return `<ul class=\"sort\">\n      <li><a href=\"#\" data-sort-type=\"${SortType.DEFAULT}\" class=\"sort__button sort__button--active\">Sort by default</a></li>\n      <li><a href=\"#\" data-sort-type=\"${SortType.DATE}\" class=\"sort__button\">Sort by date</a></li>\n      <li><a href=\"#\" data-sort-type=\"${SortType.RATING}\" class=\"sort__button\">Sort by rating</a></li>\n    </ul>`;\n};\n\nexport default class Sort extends AbstractView {\n  constructor() {\n    super();\n    this._sortTypeChangeHandler = this._sortTypeChangeHandler.bind(this);\n  }\n\n  getTemplate() {\n    return createSortTemplate();\n  }\n\n  setSortTypeChangeHandler(callback) {\n    this._callback.sortTypeChange = callback;\n    this.getElement().addEventListener(`click`, this._sortTypeChangeHandler);\n  }\n\n  _sortTypeChangeHandler(evt) {\n    if (evt.target.nodeName !== `A`) {\n      return;\n    }\n    evt.preventDefault();\n    this._callback.sortTypeChange(evt.target.dataset.sortType);\n    const sortButtonsElements = this.getElement().querySelectorAll(`.sort__button`);\n    sortButtonsElements.forEach((element) => element.classList.remove(`sort__button--active`));\n    evt.target.classList.add(`sort__button--active`);\n  }\n}\n","import AbstractView from './abstract.js';\n\nexport default class Statistics extends AbstractView {\n  constructor(count) {\n    super();\n    this._count = count;\n  }\n\n  getTemplate() {\n    return `<p>${this._count} movies inside</p>`;\n  }\n}\n","import AbstractView from './abstract.js';\n\nconst createUserProfileTemplate = ({profileRating, image}) => {\n  return `<section class=\"header__profile profile\">\n      <p class=\"profile__rating\">${profileRating}</p>\n      <img class=\"profile__avatar\" src=\"${image}\" alt=\"Avatar\" width=\"35\" height=\"35\">\n    </section>`;\n};\n\nexport default class UserProfile extends AbstractView {\n  constructor(user) {\n    super();\n    this._user = user;\n  }\n\n  getTemplate() {\n    return createUserProfileTemplate(this._user);\n  }\n}\n"],"sourceRoot":""}